/// Represents the metadata of a song stored in the local database.
class Track {
  final int? id; // Local DB ID (optional, as it's auto-increment)
  final String trackId; // Spotify track ID (required, unique)
  final String trackName; // Track name (required)
  final String artistName; // Artist name (required)
  final String albumName; // Album name (required)
  final String? albumCoverUrl; // Album cover URL (optional)
  final int? lastRecordedAt; // Timestamp of the last record added for this track (optional)
  final int? latestPlayedAt; // Timestamp of the last time this track was played via Spotify API (optional)

  Track({
    this.id,
    required this.trackId,
    required this.trackName,
    required this.artistName,
    required this.albumName,
    this.albumCoverUrl,
    this.lastRecordedAt,
    this.latestPlayedAt,
  });

  /// Creates a Track instance from a map (e.g., from SQFlite query).
  factory Track.fromMap(Map<String, dynamic> map) {
    return Track(
      id: map['id'] as int?,
      trackId: map['trackId'] as String,
      trackName: map['trackName'] as String,
      artistName: map['artistName'] as String,
      albumName: map['albumName'] as String,
      albumCoverUrl: map['albumCoverUrl'] as String?,
      lastRecordedAt: map['lastRecordedAt'] as int?,
      latestPlayedAt: map['latestPlayedAt'] as int?,
    );
  }

  /// Converts this Track instance into a map (e.g., for SQFlite insertion).
  /// Excludes 'id' because it's auto-generated by the database.
  Map<String, dynamic> toMap() {
    return {
      'trackId': trackId,
      'trackName': trackName,
      'artistName': artistName,
      'albumName': albumName,
      'albumCoverUrl': albumCoverUrl,
      'lastRecordedAt': lastRecordedAt,
      'latestPlayedAt': latestPlayedAt,
    };
  }

  @override
  String toString() {
    return 'Track{id: $id, trackId: $trackId, trackName: $trackName, artistName: $artistName, albumName: $albumName, albumCoverUrl: $albumCoverUrl, lastRecordedAt: $lastRecordedAt, latestPlayedAt: $latestPlayedAt}';
  }
} 