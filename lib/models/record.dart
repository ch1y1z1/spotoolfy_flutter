/// Represents a user's record or note about a specific track.
class Record {
  final int? id; // Local DB ID (optional, auto-increment)
  final String trackId; // Foreign key referencing the Track (required)
  final String? noteContent; // User's note content (optional)
  final String? rating; // User's rating (e.g., 'good', 'bad', 'fire') (optional)
  final int? songTimestampMs; // Playback progress when recorded (optional)
  final int recordedAt; // Absolute timestamp when recorded (required)
  final String? contextUri; // Spotify context URI (optional)
  final String? contextName; // Spotify context name (optional)
  final String? lyricsSnapshot; // Lyrics snapshot when recorded (optional)

  Record({
    this.id,
    required this.trackId,
    this.noteContent,
    this.rating,
    this.songTimestampMs,
    required this.recordedAt,
    this.contextUri,
    this.contextName,
    this.lyricsSnapshot,
  });

  /// Creates a Record instance from a map (e.g., from SQFlite query).
  factory Record.fromMap(Map<String, dynamic> map) {
    return Record(
      id: map['id'] as int?,
      trackId: map['trackId'] as String,
      noteContent: map['noteContent'] as String?,
      rating: map['rating'] as String?,
      songTimestampMs: map['songTimestampMs'] as int?,
      recordedAt: map['recordedAt'] as int,
      contextUri: map['contextUri'] as String?,
      contextName: map['contextName'] as String?,
      lyricsSnapshot: map['lyricsSnapshot'] as String?,
    );
  }

  /// Converts this Record instance into a map (e.g., for SQFlite insertion).
  /// Excludes 'id' because it's auto-generated by the database.
  Map<String, dynamic> toMap() {
    return {
      'trackId': trackId,
      'noteContent': noteContent,
      'rating': rating,
      'songTimestampMs': songTimestampMs,
      'recordedAt': recordedAt,
      'contextUri': contextUri,
      'contextName': contextName,
      'lyricsSnapshot': lyricsSnapshot,
    };
  }

  @override
  String toString() {
    return 'Record{id: $id, trackId: $trackId, noteContent: $noteContent, rating: $rating, songTimestampMs: $songTimestampMs, recordedAt: $recordedAt, contextUri: $contextUri, contextName: $contextName, lyricsSnapshot: $lyricsSnapshot}';
  }
} 